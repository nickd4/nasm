;; --------------------------------------------------------------------------
;;
;;   Copyright 1996-2020 The NASM Authors - All Rights Reserved
;;   See the file AUTHORS included with the NASM distribution for
;;   the specific copyright holders.
;;
;;   Redistribution and use in source and binary forms, with or without
;;   modification, are permitted provided that the following
;;   conditions are met:
;;
;;   * Redistributions of source code must retain the above copyright
;;     notice, this list of conditions and the following disclaimer.
;;   * Redistributions in binary form must reproduce the above
;;     copyright notice, this list of conditions and the following
;;     disclaimer in the documentation and/or other materials provided
;;     with the distribution.
;;
;;     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
;;     CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
;;     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
;;     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;;     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;;     CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;     SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
;;     NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;;     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;;     OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;;     EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;; --------------------------------------------------------------------------

;
; insns.dat    table of instructions for the Netwide Assembler
;
; Format of file: All four fields must be present on every functional
; line. Hence `void' for no-operand instructions, and `\0' for such
; as EQU. If the last three fields are all `ignore', no action is
; taken except to register the opcode as being present.
;
; For a detailed description of the code string (third field), please
; see insns.pl and the comment at the top of assemble.c. For a detailed
; description of the flags (fourth field), please see insns-iflags.ph.
;
; Comments with a pound sign after the semicolon generate section
; subheaders in the NASM documentation.
;

;# Special instructions (pseudo-ops)
; These MUST be first in this file and must maintain the pattern of
; Dx by size, RESx by size, and INCBIN in that order.
DB		ignore				ignore						ignore
DW		ignore				ignore						ignore
DD		ignore				ignore						ignore
DQ		ignore				ignore						ignore
DT		ignore				ignore						ignore
DO		ignore				ignore						ignore
DY		ignore				ignore						ignore
DZ		ignore				ignore						ignore
RESB		imm				[	resb]					8086
RESW		imm				[	resb]					8086
RESD		imm				[	resb]					8086
RESQ		imm				[	resb]					8086
REST		imm				[	resb]					8086
RESO		imm				[	resb]					8086
RESY		imm				[	resb]					8086
RESZ		imm				[	resb]					8086
INCBIN		ignore				ignore						ignore

;# Conventional instructions
AAA		void				[	37]					8086,NOLONG
AAD		void				[	d5 0a]					8086,NOLONG
AAD		imm				[i:	d5 ib,u]				8086,SB,NOLONG
AAM		void				[	d4 0a]					8086,NOLONG
AAM		imm				[i:	d4 ib,u]				8086,SB,NOLONG
AAS		void				[	3f]					8086,NOLONG
ADC		mem,reg8			[mr:	hle 10 /r]				8086,SM,LOCK
ADC		reg8,reg8			[mr:	10 /r]					8086
ADC		mem,reg16			[mr:	hle o16 11 /r]				8086,SM,LOCK
ADC		reg16,reg16			[mr:	o16 11 /r]				8086
ADC		reg8,mem			[rm:	12 /r]					8086,SM
ADC		reg8,reg8			[rm:	12 /r]					8086
ADC		reg16,mem			[rm:	o16 13 /r]				8086,SM
ADC		reg16,reg16			[rm:	o16 13 /r]				8086
ADC		rm16,imm8			[mi:	hle o16 83 /2 ib,s]			8086,LOCK
ADC		reg_al,imm			[-i:	14 ib]					8086,SM
ADC		reg_ax,sbyteword		[mi:	o16 83 /2 ib,s]				8086,SM,ND
ADC		reg_ax,imm			[-i:	o16 15 iw]				8086,SM
ADC		rm8,imm				[mi:	hle 80 /2 ib]				8086,SM,LOCK
ADC		rm16,sbyteword			[mi:	hle o16 83 /2 ib,s]			8086,SM,LOCK,ND
ADC		rm16,imm			[mi:	hle o16 81 /2 iw]			8086,SM,LOCK
ADC		mem,imm8			[mi:	hle 80 /2 ib]				8086,SM,LOCK,ND
ADC		mem,sbyteword16			[mi:	hle o16 83 /2 ib,s]			8086,SM,LOCK,ND
ADC		mem,imm16			[mi:	hle o16 81 /2 iw]			8086,SM,LOCK
ADC		rm8,imm				[mi:	hle 82 /2 ib]				8086,SM,LOCK,ND,NOLONG
ADD		mem,reg8			[mr:	hle 00 /r]				8086,SM,LOCK
ADD		reg8,reg8			[mr:	00 /r]					8086
ADD		mem,reg16			[mr:	hle o16 01 /r]				8086,SM,LOCK
ADD		reg16,reg16			[mr:	o16 01 /r]				8086
ADD		reg8,mem			[rm:	02 /r]					8086,SM
ADD		reg8,reg8			[rm:	02 /r]					8086
ADD		reg16,mem			[rm:	o16 03 /r]				8086,SM
ADD		reg16,reg16			[rm:	o16 03 /r]				8086
ADD		rm16,imm8			[mi:	hle o16 83 /0 ib,s]			8086,LOCK
ADD		reg_al,imm			[-i:	04 ib]					8086,SM
ADD		reg_ax,sbyteword		[mi:	o16 83 /0 ib,s]				8086,SM,ND
ADD		reg_ax,imm			[-i:	o16 05 iw]				8086,SM
ADD		rm8,imm				[mi:	hle 80 /0 ib]				8086,SM,LOCK
ADD		rm16,sbyteword			[mi:	hle o16 83 /0 ib,s]			8086,SM,LOCK,ND
ADD		rm16,imm			[mi:	hle o16 81 /0 iw]			8086,SM,LOCK
ADD		mem,imm8			[mi:	hle 80 /0 ib]				8086,SM,LOCK
ADD		mem,sbyteword16			[mi:	hle o16 83 /0 ib,s]			8086,SM,LOCK,ND
ADD		mem,imm16			[mi:	hle o16 81 /0 iw]			8086,SM,LOCK
ADD		rm8,imm				[mi:	hle 82 /0 ib]				8086,SM,LOCK,ND,NOLONG
AND		mem,reg8			[mr:	hle 20 /r]				8086,SM,LOCK
AND		reg8,reg8			[mr:	20 /r]					8086
AND		mem,reg16			[mr:	hle o16 21 /r]				8086,SM,LOCK
AND		reg16,reg16			[mr:	o16 21 /r]				8086
AND		reg8,mem			[rm:	22 /r]					8086,SM
AND		reg8,reg8			[rm:	22 /r]					8086
AND		reg16,mem			[rm:	o16 23 /r]				8086,SM
AND		reg16,reg16			[rm:	o16 23 /r]				8086
AND		rm16,imm8			[mi:	hle o16 83 /4 ib,s]			8086,LOCK
AND		reg_al,imm			[-i:	24 ib]					8086,SM
AND		reg_ax,sbyteword		[mi:	o16 83 /4 ib,s]				8086,SM,ND
AND		reg_ax,imm			[-i:	o16 25 iw]				8086,SM
AND		rm8,imm				[mi:	hle 80 /4 ib]				8086,SM,LOCK
AND		rm16,sbyteword			[mi:	hle o16 83 /4 ib,s]			8086,SM,LOCK,ND
AND		rm16,imm			[mi:	hle o16 81 /4 iw]			8086,SM,LOCK
AND		mem,imm8			[mi:	hle 80 /4 ib]				8086,SM,LOCK
AND		mem,sbyteword16			[mi:	hle o16 83 /4 ib,s]			8086,SM,LOCK,ND
AND		mem,imm16			[mi:	hle o16 81 /4 iw]			8086,SM,LOCK
AND		rm8,imm				[mi:	hle 82 /4 ib]				8086,SM,LOCK,ND,NOLONG
CALL		imm				[i:	odf e8 rel]				8086,BND
CALL		imm|near			[i:	odf e8 rel]				8086,ND,BND
CALL		imm|far				[i:	odf 9a iwd seg]				8086,ND,NOLONG
CALL		imm16				[i:	o16 e8 rel]				8086,NOLONG,BND
CALL		imm16|near			[i:	o16 e8 rel]				8086,ND,NOLONG,BND
CALL		imm16|far			[i:	o16 9a iwd seg]				8086,ND,NOLONG
CALL		imm:imm				[ji:	odf 9a iwd iw]				8086,NOLONG
CALL		imm16:imm			[ji:	o16 9a iw iw]				8086,NOLONG
CALL		imm:imm16			[ji:	o16 9a iw iw]				8086,NOLONG
CALL		mem|far				[m:	odf ff /3]				8086,NOLONG
CALL		mem16|far			[m:	o16 ff /3]				8086
CALL		mem|near			[m:	odf ff /2]				8086,ND,BND
CALL		rm16|near			[m:	o16 ff /2]				8086,NOLONG,ND,BND
CALL		mem				[m:	odf ff /2]				8086,BND
CALL		rm16				[m:	o16 ff /2]				8086,NOLONG,BND
CBW		void				[	o16 98]					8086
CLC		void				[	f8]					8086
CLD		void				[	fc]					8086
CLI		void				[	fa]					8086
CMC		void				[	f5]					8086
CMP		mem,reg8			[mr:	38 /r]					8086,SM
CMP		reg8,reg8			[mr:	38 /r]					8086
CMP		mem,reg16			[mr:	o16 39 /r]				8086,SM
CMP		reg16,reg16			[mr:	o16 39 /r]				8086
CMP		reg8,mem			[rm:	3a /r]					8086,SM
CMP		reg8,reg8			[rm:	3a /r]					8086
CMP		reg16,mem			[rm:	o16 3b /r]				8086,SM
CMP		reg16,reg16			[rm:	o16 3b /r]				8086
CMP		rm16,imm8			[mi:	o16 83 /7 ib,s]				8086
CMP		reg_al,imm			[-i:	3c ib]					8086,SM
CMP		reg_ax,sbyteword		[mi:	o16 83 /7 ib,s]				8086,SM,ND
CMP		reg_ax,imm			[-i:	o16 3d iw]				8086,SM
CMP		rm8,imm				[mi:	80 /7 ib]				8086,SM
CMP		rm16,sbyteword			[mi:	o16 83 /7 ib,s]				8086,SM,ND
CMP		rm16,imm			[mi:	o16 81 /7 iw]				8086,SM
CMP		mem,imm8			[mi:	80 /7 ib]				8086,SM
CMP		mem,sbyteword16			[mi:	o16 83 /7 ib,s]				8086,SM,ND
CMP		mem,imm16			[mi:	o16 81 /7 iw]				8086,SM
CMP		rm8,imm				[mi:	82 /7 ib]				8086,SM,ND,NOLONG
CMPSB		void				[	repe a6]				8086
CMPSW		void				[	repe o16 a7]				8086
CWD		void				[	o16 99]					8086
DAA		void				[	27]					8086,NOLONG
DAS		void				[	2f]					8086,NOLONG
DEC		reg16				[r:	o16 48+r]				8086,NOLONG
DEC		rm8				[m:	hle fe /1]				8086,LOCK
DEC		rm16				[m:	hle o16 ff /1]				8086,LOCK
DIV		rm8				[m:	f6 /6]					8086
DIV		rm16				[m:	o16 f7 /6]				8086
EQU		imm				ignore						8086
EQU		imm:imm				ignore						8086
F2XM1		void				[	d9 f0]					8086,FPU
FABS		void				[	d9 e1]					8086,FPU
FADD		mem32				[m:	d8 /0]					8086,FPU
FADD		mem64				[m:	dc /0]					8086,FPU
FADD		fpureg|to			[r:	dc c0+r]				8086,FPU
FADD		fpureg				[r:	d8 c0+r]				8086,FPU
FADD		fpureg,fpu0			[r-:	dc c0+r]				8086,FPU
FADD		fpu0,fpureg			[-r:	d8 c0+r]				8086,FPU
FADD		void				[	de c1]					8086,FPU,ND
FADDP		fpureg				[r:	de c0+r]				8086,FPU
FADDP		fpureg,fpu0			[r-:	de c0+r]				8086,FPU
FADDP		void				[	de c1]					8086,FPU,ND
FBLD		mem80				[m:	df /4]					8086,FPU
FBLD		mem				[m:	df /4]					8086,FPU
FBSTP		mem80				[m:	df /6]					8086,FPU
FBSTP		mem				[m:	df /6]					8086,FPU
FCHS		void				[	d9 e0]					8086,FPU
FCLEX		void				[	wait db e2]				8086,FPU
FCOM		mem32				[m:	d8 /2]					8086,FPU
FCOM		mem64				[m:	dc /2]					8086,FPU
FCOM		fpureg				[r:	d8 d0+r]				8086,FPU
FCOM		fpu0,fpureg			[-r:	d8 d0+r]				8086,FPU
FCOM		void				[	d8 d1]					8086,FPU,ND
FCOMP		mem32				[m:	d8 /3]					8086,FPU
FCOMP		mem64				[m:	dc /3]					8086,FPU
FCOMP		fpureg				[r:	d8 d8+r]				8086,FPU
FCOMP		fpu0,fpureg			[-r:	d8 d8+r]				8086,FPU
FCOMP		void				[	d8 d9]					8086,FPU,ND
FCOMPP		void				[	de d9]					8086,FPU
FDECSTP		void				[	d9 f6]					8086,FPU
FDISI		void				[	wait db e1]				8086,FPU
FDIV		mem32				[m:	d8 /6]					8086,FPU
FDIV		mem64				[m:	dc /6]					8086,FPU
FDIV		fpureg|to			[r:	dc f8+r]				8086,FPU
FDIV		fpureg				[r:	d8 f0+r]				8086,FPU
FDIV		fpureg,fpu0			[r-:	dc f8+r]				8086,FPU
FDIV		fpu0,fpureg			[-r:	d8 f0+r]				8086,FPU
FDIV		void				[	de f9]					8086,FPU,ND
FDIVP		fpureg				[r:	de f8+r]				8086,FPU
FDIVP		fpureg,fpu0			[r-:	de f8+r]				8086,FPU
FDIVP		void				[	de f9]					8086,FPU,ND
FDIVR		mem32				[m:	d8 /7]					8086,FPU
FDIVR		mem64				[m:	dc /7]					8086,FPU
FDIVR		fpureg|to			[r:	dc f0+r]				8086,FPU
FDIVR		fpureg,fpu0			[r-:	dc f0+r]				8086,FPU
FDIVR		fpureg				[r:	d8 f8+r]				8086,FPU
FDIVR		fpu0,fpureg			[-r:	d8 f8+r]				8086,FPU
FDIVR		void				[	de f1]					8086,FPU,ND
FDIVRP		fpureg				[r:	de f0+r]				8086,FPU
FDIVRP		fpureg,fpu0			[r-:	de f0+r]				8086,FPU
FDIVRP		void				[	de f1]					8086,FPU,ND
FENI		void				[	wait db e0]				8086,FPU
FFREE		fpureg				[r:	dd c0+r]				8086,FPU
FFREE		void				[	dd c1]					8086,FPU
FIADD		mem32				[m:	da /0]					8086,FPU
FIADD		mem16				[m:	de /0]					8086,FPU
FICOM		mem32				[m:	da /2]					8086,FPU
FICOM		mem16				[m:	de /2]					8086,FPU
FICOMP		mem32				[m:	da /3]					8086,FPU
FICOMP		mem16				[m:	de /3]					8086,FPU
FIDIV		mem32				[m:	da /6]					8086,FPU
FIDIV		mem16				[m:	de /6]					8086,FPU
FIDIVR		mem32				[m:	da /7]					8086,FPU
FIDIVR		mem16				[m:	de /7]					8086,FPU
FILD		mem32				[m:	db /0]					8086,FPU
FILD		mem16				[m:	df /0]					8086,FPU
FILD		mem64				[m:	df /5]					8086,FPU
FIMUL		mem32				[m:	da /1]					8086,FPU
FIMUL		mem16				[m:	de /1]					8086,FPU
FINCSTP		void				[	d9 f7]					8086,FPU
FINIT		void				[	wait db e3]				8086,FPU
FIST		mem32				[m:	db /2]					8086,FPU
FIST		mem16				[m:	df /2]					8086,FPU
FISTP		mem32				[m:	db /3]					8086,FPU
FISTP		mem16				[m:	df /3]					8086,FPU
FISTP		mem64				[m:	df /7]					8086,FPU
FISUB		mem32				[m:	da /4]					8086,FPU
FISUB		mem16				[m:	de /4]					8086,FPU
FISUBR		mem32				[m:	da /5]					8086,FPU
FISUBR		mem16				[m:	de /5]					8086,FPU
FLD		mem32				[m:	d9 /0]					8086,FPU
FLD		mem64				[m:	dd /0]					8086,FPU
FLD		mem80				[m:	db /5]					8086,FPU
FLD		fpureg				[r:	d9 c0+r]				8086,FPU
FLD		void				[	d9 c1]					8086,FPU,ND
FLD1		void				[	d9 e8]					8086,FPU
FLDCW		mem				[m:	d9 /5]					8086,FPU,SW
FLDENV		mem				[m:	d9 /4]					8086,FPU
FLDL2E		void				[	d9 ea]					8086,FPU
FLDL2T		void				[	d9 e9]					8086,FPU
FLDLG2		void				[	d9 ec]					8086,FPU
FLDLN2		void				[	d9 ed]					8086,FPU
FLDPI		void				[	d9 eb]					8086,FPU
FLDZ		void				[	d9 ee]					8086,FPU
FMUL		mem32				[m:	d8 /1]					8086,FPU
FMUL		mem64				[m:	dc /1]					8086,FPU
FMUL		fpureg|to			[r:	dc c8+r]				8086,FPU
FMUL		fpureg,fpu0			[r-:	dc c8+r]				8086,FPU
FMUL		fpureg				[r:	d8 c8+r]				8086,FPU
FMUL		fpu0,fpureg			[-r:	d8 c8+r]				8086,FPU
FMUL		void				[	de c9]					8086,FPU,ND
FMULP		fpureg				[r:	de c8+r]				8086,FPU
FMULP		fpureg,fpu0			[r-:	de c8+r]				8086,FPU
FMULP		void				[	de c9]					8086,FPU,ND
FNCLEX		void				[	db e2]					8086,FPU
FNDISI		void				[	db e1]					8086,FPU
FNENI		void				[	db e0]					8086,FPU
FNINIT		void				[	db e3]					8086,FPU
FNOP		void				[	d9 d0]					8086,FPU
FNSAVE		mem				[m:	dd /6]					8086,FPU
FNSTCW		mem				[m:	d9 /7]					8086,FPU,SW
FNSTENV		mem				[m:	d9 /6]					8086,FPU
FNSTSW		mem				[m:	dd /7]					8086,FPU,SW
FPATAN		void				[	d9 f3]					8086,FPU
FPREM		void				[	d9 f8]					8086,FPU
FPTAN		void				[	d9 f2]					8086,FPU
FRNDINT		void				[	d9 fc]					8086,FPU
FRSTOR		mem				[m:	dd /4]					8086,FPU
FSAVE		mem				[m:	wait dd /6]				8086,FPU
FSCALE		void				[	d9 fd]					8086,FPU
FSQRT		void				[	d9 fa]					8086,FPU
FST		mem32				[m:	d9 /2]					8086,FPU
FST		mem64				[m:	dd /2]					8086,FPU
FST		fpureg				[r:	dd d0+r]				8086,FPU
FST		void				[	dd d1]					8086,FPU,ND
FSTCW		mem				[m:	wait d9 /7]				8086,FPU,SW
FSTENV		mem				[m:	wait d9 /6]				8086,FPU
FSTP		mem32				[m:	d9 /3]					8086,FPU
FSTP		mem64				[m:	dd /3]					8086,FPU
FSTP		mem80				[m:	db /7]					8086,FPU
FSTP		fpureg				[r:	dd d8+r]				8086,FPU
FSTP		void				[	dd d9]					8086,FPU,ND
FSTSW		mem				[m:	wait dd /7]				8086,FPU,SW
FSUB		mem32				[m:	d8 /4]					8086,FPU
FSUB		mem64				[m:	dc /4]					8086,FPU
FSUB		fpureg|to			[r:	dc e8+r]				8086,FPU
FSUB		fpureg,fpu0			[r-:	dc e8+r]				8086,FPU
FSUB		fpureg				[r:	d8 e0+r]				8086,FPU
FSUB		fpu0,fpureg			[-r:	d8 e0+r]				8086,FPU
FSUB		void				[	de e9]					8086,FPU,ND
FSUBP		fpureg				[r:	de e8+r]				8086,FPU
FSUBP		fpureg,fpu0			[r-:	de e8+r]				8086,FPU
FSUBP		void				[	de e9]					8086,FPU,ND
FSUBR		mem32				[m:	d8 /5]					8086,FPU
FSUBR		mem64				[m:	dc /5]					8086,FPU
FSUBR		fpureg|to			[r:	dc e0+r]				8086,FPU
FSUBR		fpureg,fpu0			[r-:	dc e0+r]				8086,FPU
FSUBR		fpureg				[r:	d8 e8+r]				8086,FPU
FSUBR		fpu0,fpureg			[-r:	d8 e8+r]				8086,FPU
FSUBR		void				[	de e1]					8086,FPU,ND
FSUBRP		fpureg				[r:	de e0+r]				8086,FPU
FSUBRP		fpureg,fpu0			[r-:	de e0+r]				8086,FPU
FSUBRP		void				[	de e1]					8086,FPU,ND
FTST		void				[	d9 e4]					8086,FPU
FXAM		void				[	d9 e5]					8086,FPU
FXCH		fpureg				[r:	d9 c8+r]				8086,FPU
FXCH		fpureg,fpu0			[r-:	d9 c8+r]				8086,FPU
FXCH		fpu0,fpureg			[-r:	d9 c8+r]				8086,FPU
FXCH		void				[	d9 c9]					8086,FPU,ND
FXTRACT		void				[	d9 f4]					8086,FPU
FYL2X		void				[	d9 f1]					8086,FPU
FYL2XP1		void				[	d9 f9]					8086,FPU
HLT		void				[	f4]					8086,PRIV
IDIV		rm8				[m:	f6 /7]					8086
IDIV		rm16				[m:	o16 f7 /7]				8086
IMUL		rm8				[m:	f6 /5]					8086
IMUL		rm16				[m:	o16 f7 /5]				8086
IN		reg_al,imm			[-i:	e4 ib,u]				8086,SB
IN		reg_ax,imm			[-i:	o16 e5 ib,u]				8086,SB
IN		reg_al,reg_dx			[--:	ec]					8086
IN		reg_ax,reg_dx			[--:	o16 ed]					8086
INC		reg16				[r:	o16 40+r]				8086,NOLONG
INC		rm8				[m:	hle fe /0]				8086,LOCK
INC		rm16				[m:	hle o16 ff /0]				8086,LOCK
INT		imm				[i:	cd ib,u]				8086,SB
INT03		void				[	cc]					8086,ND
INT3		void				[	cc]					8086
INTO		void				[	ce]					8086,NOLONG
IRET		void				[	odf cf]					8086
IRETW		void				[	o16 cf]					8086
JCXZ		imm				[i:	a16 e3 rel8]				8086,NOLONG
JMP		imm|short			[i:	eb rel8]				8086
JMP		imm				[i:	jmp8 eb rel8]				8086,ND
JMP		imm				[i:	odf e9 rel]				8086,BND
JMP		imm|near			[i:	odf e9 rel]				8086,ND,BND
JMP		imm|far				[i:	odf ea iwd seg]				8086,ND,NOLONG
JMP		imm16				[i:	o16 e9 rel]				8086,NOLONG,BND
JMP		imm16|near			[i:	o16 e9 rel]				8086,ND,NOLONG,BND
JMP		imm16|far			[i:	o16 ea iwd seg]				8086,ND,NOLONG
JMP		imm:imm				[ji:	odf ea iwd iw]				8086,NOLONG
JMP		imm16:imm			[ji:	o16 ea iw iw]				8086,NOLONG
JMP		imm:imm16			[ji:	o16 ea iw iw]				8086,NOLONG
JMP		mem|far				[m:	odf ff /5]				8086,NOLONG
JMP		mem16|far			[m:	o16 ff /5]				8086
JMP		mem|near			[m:	odf ff /4]				8086,ND,BND
JMP		rm16|near			[m:	o16 ff /4]				8086,NOLONG,ND,BND
JMP		mem				[m:	odf ff /4]				8086,BND
JMP		rm16				[m:	o16 ff /4]				8086,NOLONG,BND
LAHF		void				[	9f]					8086
LDS		reg16,mem			[rm:	o16 c5 /r]				8086,NOLONG
LEA		reg16,mem			[rm:	o16 8d /r]				8086,ANYSIZE
LEA		reg16,imm			[rm:	o16 8d /r]				8086,ND,ANYSIZE
LES		reg16,mem			[rm:	o16 c4 /r]				8086,NOLONG
LODSB		void				[	ac]					8086
LODSW		void				[	o16 ad]					8086
LOOP		imm				[i:	adf e2 rel8]				8086
LOOP		imm,reg_cx			[i-:	a16 e2 rel8]				8086,NOLONG
LOOPE		imm				[i:	adf e1 rel8]				8086
LOOPE		imm,reg_cx			[i-:	a16 e1 rel8]				8086,NOLONG
LOOPNE		imm				[i:	adf e0 rel8]				8086
LOOPNE		imm,reg_cx			[i-:	a16 e0 rel8]				8086,NOLONG
LOOPNZ		imm				[i:	adf e0 rel8]				8086
LOOPNZ		imm,reg_cx			[i-:	a16 e0 rel8]				8086,NOLONG
LOOPZ		imm				[i:	adf e1 rel8]				8086
LOOPZ		imm,reg_cx			[i-:	a16 e1 rel8]				8086,NOLONG
MOV		mem,reg_sreg			[mr:	8c /r]					8086,SW
MOV		reg16,reg_sreg			[mr:	o16 8c /r]				8086
MOV		reg_sreg,mem			[rm:	8e /r]					8086,SW
MOV		reg_sreg,reg16			[rm:	8e /r]					8086,OPT,ND
MOV		reg_sreg,reg16			[rm:	o16 8e /r]				8086
MOV		reg_al,mem_offs			[-i:	a0 iwdq]				8086,SM
MOV		reg_ax,mem_offs			[-i:	o16 a1 iwdq]				8086,SM
MOV		mem_offs,reg_al			[i-:	a2 iwdq]				8086,SM,NOHLE
MOV		mem_offs,reg_ax			[i-:	o16 a3 iwdq]				8086,SM,NOHLE
MOV		mem,reg8			[mr:	hlexr 88 /r]				8086,SM
MOV		reg8,reg8			[mr:	88 /r]					8086
MOV		mem,reg16			[mr:	hlexr o16 89 /r]			8086,SM
MOV		reg16,reg16			[mr:	o16 89 /r]				8086
MOV		reg8,mem			[rm:	8a /r]					8086,SM
MOV		reg8,reg8			[rm:	8a /r]					8086
MOV		reg16,mem			[rm:	o16 8b /r]				8086,SM
MOV		reg16,reg16			[rm:	o16 8b /r]				8086
MOV		reg8,imm			[ri:	b0+r ib]				8086,SM
MOV		reg16,imm			[ri:	o16 b8+r iw]				8086,SM
MOV		rm8,imm				[mi:	hlexr c6 /0 ib]				8086,SM
MOV		rm16,imm			[mi:	hlexr o16 c7 /0 iw]			8086,SM
MOV		mem,imm8			[mi:	hlexr c6 /0 ib]				8086,SM
MOV		mem,imm16			[mi:	hlexr o16 c7 /0 iw]			8086,SM
MOVSB		void				[	a4]					8086
MOVSW		void				[	o16 a5]					8086
MUL		rm8				[m:	f6 /4]					8086
MUL		rm16				[m:	o16 f7 /4]				8086
NEG		rm8				[m:	hle f6 /3]				8086,LOCK
NEG		rm16				[m:	hle o16 f7 /3]				8086,LOCK
NOP		void				[	norexb nof3 90]				8086
NOT		rm8				[m:	hle f6 /2]				8086,LOCK
NOT		rm16				[m:	hle o16 f7 /2]				8086,LOCK
OR		mem,reg8			[mr:	hle 08 /r]				8086,SM,LOCK
OR		reg8,reg8			[mr:	08 /r]					8086
OR		mem,reg16			[mr:	hle o16 09 /r]				8086,SM,LOCK
OR		reg16,reg16			[mr:	o16 09 /r]				8086
OR		reg8,mem			[rm:	0a /r]					8086,SM
OR		reg8,reg8			[rm:	0a /r]					8086
OR		reg16,mem			[rm:	o16 0b /r]				8086,SM
OR		reg16,reg16			[rm:	o16 0b /r]				8086
OR		rm16,imm8			[mi:	hle o16 83 /1 ib,s]			8086,LOCK
OR		reg_al,imm			[-i:	0c ib]					8086,SM
OR		reg_ax,sbyteword		[mi:	o16 83 /1 ib,s]				8086,SM,ND
OR		reg_ax,imm			[-i:	o16 0d iw]				8086,SM
OR		rm8,imm				[mi:	hle 80 /1 ib]				8086,SM,LOCK
OR		rm16,sbyteword			[mi:	hle o16 83 /1 ib,s]			8086,SM,LOCK,ND
OR		rm16,imm			[mi:	hle o16 81 /1 iw]			8086,SM,LOCK
OR		mem,imm8			[mi:	hle 80 /1 ib]				8086,SM,LOCK
OR		mem,sbyteword16			[mi:	hle o16 83 /1 ib,s]			8086,SM,LOCK,ND
OR		mem,imm16			[mi:	hle o16 81 /1 iw]			8086,SM,LOCK
OR		rm8,imm				[mi:	hle 82 /1 ib]				8086,SM,LOCK,ND,NOLONG
OUT		imm,reg_al			[i-:	e6 ib,u]				8086,SB
OUT		imm,reg_ax			[i-:	o16 e7 ib,u]				8086,SB
OUT		reg_dx,reg_al			[--:	ee]					8086
OUT		reg_dx,reg_ax			[--:	o16 ef]					8086
PAUSE		void				[	f3i 90]					8086
POP		reg16				[r:	o16 58+r]				8086
POP		rm16				[m:	o16 8f /0]				8086
POP		reg_es				[-:	07]					8086,NOLONG
POP		reg_cs				[-:	0f]					8086,UNDOC,ND,OBSOLETE
POP		reg_ss				[-:	17]					8086,NOLONG
POP		reg_ds				[-:	1f]					8086,NOLONG
POPF		void				[	odf 9d]					8086
POPFW		void				[	o16 9d]					8086
PUSH		reg16				[r:	o16 50+r]				8086
PUSH		rm16				[m:	o16 ff /6]				8086
PUSH		reg_es				[-:	06]					8086,NOLONG
PUSH		reg_cs				[-:	0e]					8086,NOLONG
PUSH		reg_ss				[-:	16]					8086,NOLONG
PUSH		reg_ds				[-:	1e]					8086,NOLONG
PUSHF		void				[	odf 9c]					8086
PUSHFW		void				[	o16 9c]					8086
RCL		rm8,unity			[m-:	d0 /2]					8086
RCL		rm8,reg_cl			[m-:	d2 /2]					8086
RCL		rm16,unity			[m-:	o16 d1 /2]				8086
RCL		rm16,reg_cl			[m-:	o16 d3 /2]				8086
RCR		rm8,unity			[m-:	d0 /3]					8086
RCR		rm8,reg_cl			[m-:	d2 /3]					8086
RCR		rm16,unity			[m-:	o16 d1 /3]				8086
RCR		rm16,reg_cl			[m-:	o16 d3 /3]				8086
RET		void				[	c3]					8086,BND
RET		imm				[i:	c2 iw]					8086,SW,BND
RETF		void				[	cb]					8086
RETF		imm				[i:	ca iw]					8086,SW
RETN		void				[	c3]					8086,BND
RETN		imm				[i:	c2 iw]					8086,SW,BND
RETW		void				[	o16 c3]					8086,BND
RETW		imm				[i:	c2 iw]					8086,SW,BND
RETFW		void				[	o16 cb]					8086
RETFW		imm				[i:	o16 ca iw]				8086,SW
RETNW		void				[	o16 c3]					8086,BND
RETNW		imm				[i:	o16 c2 iw]				8086,SW,BND
RETD		void				[	o32 c3]					8086,BND,NOLONG
RETD		imm				[i:	o32 c2 iw]				8086,SW,BND,NOLONG
RETFD		void				[	o32 cb]					8086
RETFD		imm				[i:	o32 ca iw]				8086,SW
RETND		void				[	o32 c3]					8086,BND,NOLONG
RETND		imm				[i:	o32 c2 iw]				8086,SW,BND,NOLONG
ROL		rm8,unity			[m-:	d0 /0]					8086
ROL		rm8,reg_cl			[m-:	d2 /0]					8086
ROL		rm16,unity			[m-:	o16 d1 /0]				8086
ROL		rm16,reg_cl			[m-:	o16 d3 /0]				8086
ROR		rm8,unity			[m-:	d0 /1]					8086
ROR		rm8,reg_cl			[m-:	d2 /1]					8086
ROR		rm16,unity			[m-:	o16 d1 /1]				8086
ROR		rm16,reg_cl			[m-:	o16 d3 /1]				8086
SAHF		void				[	9e]					8086
SAL		rm8,unity			[m-:	d0 /4]					8086,ND
SAL		rm8,reg_cl			[m-:	d2 /4]					8086,ND
SAL		rm16,unity			[m-:	o16 d1 /4]				8086,ND
SAL		rm16,reg_cl			[m-:	o16 d3 /4]				8086,ND
SALC		void				[	d6]					8086,UNDOC
SAR		rm8,unity			[m-:	d0 /7]					8086
SAR		rm8,reg_cl			[m-:	d2 /7]					8086
SAR		rm16,unity			[m-:	o16 d1 /7]				8086
SAR		rm16,reg_cl			[m-:	o16 d3 /7]				8086
SBB		mem,reg8			[mr:	hle 18 /r]				8086,SM,LOCK
SBB		reg8,reg8			[mr:	18 /r]					8086
SBB		mem,reg16			[mr:	hle o16 19 /r]				8086,SM,LOCK
SBB		reg16,reg16			[mr:	o16 19 /r]				8086
SBB		reg8,mem			[rm:	1a /r]					8086,SM
SBB		reg8,reg8			[rm:	1a /r]					8086
SBB		reg16,mem			[rm:	o16 1b /r]				8086,SM
SBB		reg16,reg16			[rm:	o16 1b /r]				8086
SBB		rm16,imm8			[mi:	hle o16 83 /3 ib,s]			8086,LOCK
SBB		reg_al,imm			[-i:	1c ib]					8086,SM
SBB		reg_ax,sbyteword		[mi:	o16 83 /3 ib,s]				8086,SM,ND
SBB		reg_ax,imm			[-i:	o16 1d iw]				8086,SM
SBB		rm8,imm				[mi:	hle 80 /3 ib]				8086,SM,LOCK
SBB		rm16,sbyteword			[mi:	hle o16 83 /3 ib,s]			8086,SM,LOCK,ND
SBB		rm16,imm			[mi:	hle o16 81 /3 iw]			8086,SM,LOCK
SBB		mem,imm8			[mi:	hle 80 /3 ib]				8086,SM,LOCK
SBB		mem,sbyteword16			[mi:	hle o16 83 /3 ib,s]			8086,SM,LOCK,ND
SBB		mem,imm16			[mi:	hle o16 81 /3 iw]			8086,SM,LOCK
SBB		rm8,imm				[mi:	hle 82 /3 ib]				8086,SM,LOCK,ND,NOLONG
SCASB		void				[	repe ae]				8086
SCASW		void				[	repe o16 af]				8086
SHL		rm8,unity			[m-:	d0 /4]					8086
SHL		rm8,reg_cl			[m-:	d2 /4]					8086
SHL		rm16,unity			[m-:	o16 d1 /4]				8086
SHL		rm16,reg_cl			[m-:	o16 d3 /4]				8086
SHR		rm8,unity			[m-:	d0 /5]					8086
SHR		rm8,reg_cl			[m-:	d2 /5]					8086
SHR		rm16,unity			[m-:	o16 d1 /5]				8086
SHR		rm16,reg_cl			[m-:	o16 d3 /5]				8086
STC		void				[	f9]					8086
STD		void				[	fd]					8086
STI		void				[	fb]					8086
STOSB		void				[	aa]					8086
STOSW		void				[	o16 ab]					8086
SUB		mem,reg8			[mr:	hle 28 /r]				8086,SM,LOCK
SUB		reg8,reg8			[mr:	28 /r]					8086
SUB		mem,reg16			[mr:	hle o16 29 /r]				8086,SM,LOCK
SUB		reg16,reg16			[mr:	o16 29 /r]				8086
SUB		reg8,mem			[rm:	2a /r]					8086,SM
SUB		reg8,reg8			[rm:	2a /r]					8086
SUB		reg16,mem			[rm:	o16 2b /r]				8086,SM
SUB		reg16,reg16			[rm:	o16 2b /r]				8086
SUB		rm16,imm8			[mi:	hle o16 83 /5 ib,s]			8086,LOCK
SUB		reg_al,imm			[-i:	2c ib]					8086,SM
SUB		reg_ax,sbyteword		[mi:	o16 83 /5 ib,s]				8086,SM,ND
SUB		reg_ax,imm			[-i:	o16 2d iw]				8086,SM
SUB		rm8,imm				[mi:	hle 80 /5 ib]				8086,SM,LOCK
SUB		rm16,sbyteword			[mi:	hle o16 83 /5 ib,s]			8086,SM,LOCK,ND
SUB		rm16,imm			[mi:	hle o16 81 /5 iw]			8086,SM,LOCK
SUB		mem,imm8			[mi:	hle 80 /5 ib]				8086,SM,LOCK
SUB		mem,sbyteword16			[mi:	hle o16 83 /5 ib,s]			8086,SM,LOCK,ND
SUB		mem,imm16			[mi:	hle o16 81 /5 iw]			8086,SM,LOCK
SUB		rm8,imm				[mi:	hle 82 /5 ib]				8086,SM,LOCK,ND,NOLONG
TEST		mem,reg8			[mr:	84 /r]					8086,SM
TEST		reg8,reg8			[mr:	84 /r]					8086
TEST		mem,reg16			[mr:	o16 85 /r]				8086,SM
TEST		reg16,reg16			[mr:	o16 85 /r]				8086
TEST		reg8,mem			[rm:	84 /r]					8086,SM
TEST		reg16,mem			[rm:	o16 85 /r]				8086,SM
TEST		reg_al,imm			[-i:	a8 ib]					8086,SM
TEST		reg_ax,imm			[-i:	o16 a9 iw]				8086,SM
TEST		rm8,imm				[mi:	f6 /0 ib]				8086,SM
TEST		rm16,imm			[mi:	o16 f7 /0 iw]				8086,SM
TEST		mem,imm8			[mi:	f6 /0 ib]				8086,SM
TEST		mem,imm16			[mi:	o16 f7 /0 iw]				8086,SM
FWAIT		void				[	wait]					8086
XCHG		reg_ax,reg16			[-r:	o16 90+r]				8086
XCHG		reg16,reg_ax			[r-:	o16 90+r]				8086
XCHG		reg8,mem			[rm:	hlenl 86 /r]				8086,SM,LOCK
XCHG		reg8,reg8			[rm:	86 /r]					8086
XCHG		reg16,mem			[rm:	hlenl o16 87 /r]			8086,SM,LOCK
XCHG		reg16,reg16			[rm:	o16 87 /r]				8086
XCHG		mem,reg8			[mr:	hlenl 86 /r]				8086,SM,LOCK
XCHG		reg8,reg8			[mr:	86 /r]					8086
XCHG		mem,reg16			[mr:	hlenl o16 87 /r]			8086,SM,LOCK
XCHG		reg16,reg16			[mr:	o16 87 /r]				8086
XLATB		void				[	d7]					8086
XLAT		void				[	d7]					8086
XOR		mem,reg8			[mr:	hle 30 /r]				8086,SM,LOCK
XOR		reg8,reg8			[mr:	30 /r]					8086
XOR		mem,reg16			[mr:	hle o16 31 /r]				8086,SM,LOCK
XOR		reg16,reg16			[mr:	o16 31 /r]				8086
XOR		reg8,mem			[rm:	32 /r]					8086,SM
XOR		reg8,reg8			[rm:	32 /r]					8086
XOR		reg16,mem			[rm:	o16 33 /r]				8086,SM
XOR		reg16,reg16			[rm:	o16 33 /r]				8086
XOR		rm16,imm8			[mi:	hle o16 83 /6 ib,s]			8086,LOCK
XOR		reg_al,imm			[-i:	34 ib]					8086,SM
XOR		reg_ax,sbyteword		[mi:	o16 83 /6 ib,s]				8086,SM,ND
XOR		reg_ax,imm			[-i:	o16 35 iw]				8086,SM
XOR		rm8,imm				[mi:	hle 80 /6 ib]				8086,SM,LOCK
XOR		rm16,sbyteword			[mi:	hle o16 83 /6 ib,s]			8086,SM,LOCK,ND
XOR		rm16,imm			[mi:	hle o16 81 /6 iw]			8086,SM,LOCK
XOR		mem,imm8			[mi:	hle 80 /6 ib]				8086,SM,LOCK
XOR		mem,sbyteword16			[mi:	hle o16 83 /6 ib,s]			8086,SM,LOCK,ND
XOR		mem,imm16			[mi:	hle o16 81 /6 iw]			8086,SM,LOCK
XOR		rm8,imm				[mi:	hle 82 /6 ib]				8086,SM,LOCK,ND,NOLONG
Jcc		imm|short			[i:	70+c rel8]				8086,ND,BND
Jcc		imm				[i:	jcc8 70+c rel8]				8086,ND,BND
Jcc		imm				[i:	71+c jlen e9 rel]			8086,ND,BND
Jcc		imm				[i:	70+c rel8]				8086,BND
